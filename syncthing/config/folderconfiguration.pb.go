// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: config/folderconfiguration.proto

package config

import (
	fs "github.com/zebfross/syncthing-mobile/syncthing/fs"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FolderDeviceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId           []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IntroducedBy       []byte `protobuf:"bytes,2,opt,name=introduced_by,json=introducedBy,proto3" json:"introduced_by,omitempty"`
	EncryptionPassword string `protobuf:"bytes,3,opt,name=encryption_password,json=encryptionPassword,proto3" json:"encryption_password,omitempty"`
}

func (x *FolderDeviceConfiguration) Reset() {
	*x = FolderDeviceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_folderconfiguration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderDeviceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderDeviceConfiguration) ProtoMessage() {}

func (x *FolderDeviceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_folderconfiguration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderDeviceConfiguration.ProtoReflect.Descriptor instead.
func (*FolderDeviceConfiguration) Descriptor() ([]byte, []int) {
	return file_config_folderconfiguration_proto_rawDescGZIP(), []int{0}
}

func (x *FolderDeviceConfiguration) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *FolderDeviceConfiguration) GetIntroducedBy() []byte {
	if x != nil {
		return x.IntroducedBy
	}
	return nil
}

func (x *FolderDeviceConfiguration) GetEncryptionPassword() string {
	if x != nil {
		return x.EncryptionPassword
	}
	return ""
}

type FolderConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label                   string                       `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	FilesystemType          fs.FilesystemType            `protobuf:"varint,3,opt,name=filesystem_type,json=filesystemType,proto3,enum=fs.FilesystemType" json:"filesystem_type,omitempty"`
	Path                    string                       `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Type                    FolderType                   `protobuf:"varint,5,opt,name=type,proto3,enum=config.FolderType" json:"type,omitempty"`
	Devices                 []*FolderDeviceConfiguration `protobuf:"bytes,6,rep,name=devices,proto3" json:"devices,omitempty"`
	RescanIntervalS         int32                        `protobuf:"varint,7,opt,name=rescan_interval_s,json=rescanIntervalS,proto3" json:"rescan_interval_s,omitempty"`
	FsWatcherEnabled        bool                         `protobuf:"varint,8,opt,name=fs_watcher_enabled,json=fsWatcherEnabled,proto3" json:"fs_watcher_enabled,omitempty"`
	FsWatcherDelayS         int32                        `protobuf:"varint,9,opt,name=fs_watcher_delay_s,json=fsWatcherDelayS,proto3" json:"fs_watcher_delay_s,omitempty"`
	IgnorePerms             bool                         `protobuf:"varint,10,opt,name=ignore_perms,json=ignorePerms,proto3" json:"ignore_perms,omitempty"`
	AutoNormalize           bool                         `protobuf:"varint,11,opt,name=auto_normalize,json=autoNormalize,proto3" json:"auto_normalize,omitempty"`
	MinDiskFree             *Size                        `protobuf:"bytes,12,opt,name=min_disk_free,json=minDiskFree,proto3" json:"min_disk_free,omitempty"`
	Versioning              *VersioningConfiguration     `protobuf:"bytes,13,opt,name=versioning,proto3" json:"versioning,omitempty"`
	Copiers                 int32                        `protobuf:"varint,14,opt,name=copiers,proto3" json:"copiers,omitempty"`
	PullerMaxPendingKib     int32                        `protobuf:"varint,15,opt,name=puller_max_pending_kib,json=pullerMaxPendingKib,proto3" json:"puller_max_pending_kib,omitempty"`
	Hashers                 int32                        `protobuf:"varint,16,opt,name=hashers,proto3" json:"hashers,omitempty"`
	Order                   PullOrder                    `protobuf:"varint,17,opt,name=order,proto3,enum=config.PullOrder" json:"order,omitempty"`
	IgnoreDelete            bool                         `protobuf:"varint,18,opt,name=ignore_delete,json=ignoreDelete,proto3" json:"ignore_delete,omitempty"`
	ScanProgressIntervalS   int32                        `protobuf:"varint,19,opt,name=scan_progress_interval_s,json=scanProgressIntervalS,proto3" json:"scan_progress_interval_s,omitempty"`
	PullerPauseS            int32                        `protobuf:"varint,20,opt,name=puller_pause_s,json=pullerPauseS,proto3" json:"puller_pause_s,omitempty"`
	MaxConflicts            int32                        `protobuf:"varint,21,opt,name=max_conflicts,json=maxConflicts,proto3" json:"max_conflicts,omitempty"`
	DisableSparseFiles      bool                         `protobuf:"varint,22,opt,name=disable_sparse_files,json=disableSparseFiles,proto3" json:"disable_sparse_files,omitempty"`
	DisableTempIndexes      bool                         `protobuf:"varint,23,opt,name=disable_temp_indexes,json=disableTempIndexes,proto3" json:"disable_temp_indexes,omitempty"`
	Paused                  bool                         `protobuf:"varint,24,opt,name=paused,proto3" json:"paused,omitempty"`
	WeakHashThresholdPct    int32                        `protobuf:"varint,25,opt,name=weak_hash_threshold_pct,json=weakHashThresholdPct,proto3" json:"weak_hash_threshold_pct,omitempty"`
	MarkerName              string                       `protobuf:"bytes,26,opt,name=marker_name,json=markerName,proto3" json:"marker_name,omitempty"`
	CopyOwnershipFromParent bool                         `protobuf:"varint,27,opt,name=copy_ownership_from_parent,json=copyOwnershipFromParent,proto3" json:"copy_ownership_from_parent,omitempty"`
	ModTimeWindowS          int32                        `protobuf:"varint,28,opt,name=mod_time_window_s,json=modTimeWindowS,proto3" json:"mod_time_window_s,omitempty"`
	MaxConcurrentWrites     int32                        `protobuf:"varint,29,opt,name=max_concurrent_writes,json=maxConcurrentWrites,proto3" json:"max_concurrent_writes,omitempty"`
	DisableFsync            bool                         `protobuf:"varint,30,opt,name=disable_fsync,json=disableFsync,proto3" json:"disable_fsync,omitempty"`
	BlockPullOrder          BlockPullOrder               `protobuf:"varint,31,opt,name=block_pull_order,json=blockPullOrder,proto3,enum=config.BlockPullOrder" json:"block_pull_order,omitempty"`
	CopyRangeMethod         fs.CopyRangeMethod           `protobuf:"varint,32,opt,name=copy_range_method,json=copyRangeMethod,proto3,enum=fs.CopyRangeMethod" json:"copy_range_method,omitempty"`
	CaseSensitiveFs         bool                         `protobuf:"varint,33,opt,name=case_sensitive_fs,json=caseSensitiveFs,proto3" json:"case_sensitive_fs,omitempty"`
	FollowJunctions         bool                         `protobuf:"varint,34,opt,name=follow_junctions,json=followJunctions,proto3" json:"follow_junctions,omitempty"`
	SyncOwnership           bool                         `protobuf:"varint,35,opt,name=sync_ownership,json=syncOwnership,proto3" json:"sync_ownership,omitempty"`
}

func (x *FolderConfiguration) Reset() {
	*x = FolderConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_folderconfiguration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderConfiguration) ProtoMessage() {}

func (x *FolderConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_folderconfiguration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderConfiguration.ProtoReflect.Descriptor instead.
func (*FolderConfiguration) Descriptor() ([]byte, []int) {
	return file_config_folderconfiguration_proto_rawDescGZIP(), []int{1}
}

func (x *FolderConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FolderConfiguration) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FolderConfiguration) GetFilesystemType() fs.FilesystemType {
	if x != nil {
		return x.FilesystemType
	}
	return fs.FilesystemType(0)
}

func (x *FolderConfiguration) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FolderConfiguration) GetType() FolderType {
	if x != nil {
		return x.Type
	}
	return FolderType_FOLDER_TYPE_SEND_RECEIVE
}

func (x *FolderConfiguration) GetDevices() []*FolderDeviceConfiguration {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *FolderConfiguration) GetRescanIntervalS() int32 {
	if x != nil {
		return x.RescanIntervalS
	}
	return 0
}

func (x *FolderConfiguration) GetFsWatcherEnabled() bool {
	if x != nil {
		return x.FsWatcherEnabled
	}
	return false
}

func (x *FolderConfiguration) GetFsWatcherDelayS() int32 {
	if x != nil {
		return x.FsWatcherDelayS
	}
	return 0
}

func (x *FolderConfiguration) GetIgnorePerms() bool {
	if x != nil {
		return x.IgnorePerms
	}
	return false
}

func (x *FolderConfiguration) GetAutoNormalize() bool {
	if x != nil {
		return x.AutoNormalize
	}
	return false
}

func (x *FolderConfiguration) GetMinDiskFree() *Size {
	if x != nil {
		return x.MinDiskFree
	}
	return nil
}

func (x *FolderConfiguration) GetVersioning() *VersioningConfiguration {
	if x != nil {
		return x.Versioning
	}
	return nil
}

func (x *FolderConfiguration) GetCopiers() int32 {
	if x != nil {
		return x.Copiers
	}
	return 0
}

func (x *FolderConfiguration) GetPullerMaxPendingKib() int32 {
	if x != nil {
		return x.PullerMaxPendingKib
	}
	return 0
}

func (x *FolderConfiguration) GetHashers() int32 {
	if x != nil {
		return x.Hashers
	}
	return 0
}

func (x *FolderConfiguration) GetOrder() PullOrder {
	if x != nil {
		return x.Order
	}
	return PullOrder_PULL_ORDER_RANDOM
}

func (x *FolderConfiguration) GetIgnoreDelete() bool {
	if x != nil {
		return x.IgnoreDelete
	}
	return false
}

func (x *FolderConfiguration) GetScanProgressIntervalS() int32 {
	if x != nil {
		return x.ScanProgressIntervalS
	}
	return 0
}

func (x *FolderConfiguration) GetPullerPauseS() int32 {
	if x != nil {
		return x.PullerPauseS
	}
	return 0
}

func (x *FolderConfiguration) GetMaxConflicts() int32 {
	if x != nil {
		return x.MaxConflicts
	}
	return 0
}

func (x *FolderConfiguration) GetDisableSparseFiles() bool {
	if x != nil {
		return x.DisableSparseFiles
	}
	return false
}

func (x *FolderConfiguration) GetDisableTempIndexes() bool {
	if x != nil {
		return x.DisableTempIndexes
	}
	return false
}

func (x *FolderConfiguration) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *FolderConfiguration) GetWeakHashThresholdPct() int32 {
	if x != nil {
		return x.WeakHashThresholdPct
	}
	return 0
}

func (x *FolderConfiguration) GetMarkerName() string {
	if x != nil {
		return x.MarkerName
	}
	return ""
}

func (x *FolderConfiguration) GetCopyOwnershipFromParent() bool {
	if x != nil {
		return x.CopyOwnershipFromParent
	}
	return false
}

func (x *FolderConfiguration) GetModTimeWindowS() int32 {
	if x != nil {
		return x.ModTimeWindowS
	}
	return 0
}

func (x *FolderConfiguration) GetMaxConcurrentWrites() int32 {
	if x != nil {
		return x.MaxConcurrentWrites
	}
	return 0
}

func (x *FolderConfiguration) GetDisableFsync() bool {
	if x != nil {
		return x.DisableFsync
	}
	return false
}

func (x *FolderConfiguration) GetBlockPullOrder() BlockPullOrder {
	if x != nil {
		return x.BlockPullOrder
	}
	return BlockPullOrder_BLOCK_PULL_ORDER_STANDARD
}

func (x *FolderConfiguration) GetCopyRangeMethod() fs.CopyRangeMethod {
	if x != nil {
		return x.CopyRangeMethod
	}
	return fs.CopyRangeMethod(0)
}

func (x *FolderConfiguration) GetCaseSensitiveFs() bool {
	if x != nil {
		return x.CaseSensitiveFs
	}
	return false
}

func (x *FolderConfiguration) GetFollowJunctions() bool {
	if x != nil {
		return x.FollowJunctions
	}
	return false
}

func (x *FolderConfiguration) GetSyncOwnership() bool {
	if x != nil {
		return x.SyncOwnership
	}
	return false
}

var File_config_folderconfiguration_proto protoreflect.FileDescriptor

var file_config_folderconfiguration_proto_rawDesc = []byte{
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x17, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x69, 0x7a, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70,
	0x75, 0x6c, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x70, 0x75, 0x6c, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x66, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x66, 0x73, 0x2f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x19,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x86, 0x0c, 0x0a,
	0x13, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x73, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x73,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x30, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4b, 0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73,
	0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x75,
	0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x77,
	0x65, 0x61, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x77, 0x65,
	0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50,
	0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x70, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x75,
	0x6c, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x75, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x75, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x66, 0x73, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x62, 0x66, 0x72, 0x6f, 0x73, 0x73, 0x2f, 0x73, 0x79, 0x6e,
	0x63, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x79,
	0x6e, 0x63, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_folderconfiguration_proto_rawDescOnce sync.Once
	file_config_folderconfiguration_proto_rawDescData = file_config_folderconfiguration_proto_rawDesc
)

func file_config_folderconfiguration_proto_rawDescGZIP() []byte {
	file_config_folderconfiguration_proto_rawDescOnce.Do(func() {
		file_config_folderconfiguration_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_folderconfiguration_proto_rawDescData)
	})
	return file_config_folderconfiguration_proto_rawDescData
}

var file_config_folderconfiguration_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_config_folderconfiguration_proto_goTypes = []interface{}{
	(*FolderDeviceConfiguration)(nil), // 0: config.FolderDeviceConfiguration
	(*FolderConfiguration)(nil),       // 1: config.FolderConfiguration
	(fs.FilesystemType)(0),            // 2: fs.FilesystemType
	(FolderType)(0),                   // 3: config.FolderType
	(*Size)(nil),                      // 4: config.Size
	(*VersioningConfiguration)(nil),   // 5: config.VersioningConfiguration
	(PullOrder)(0),                    // 6: config.PullOrder
	(BlockPullOrder)(0),               // 7: config.BlockPullOrder
	(fs.CopyRangeMethod)(0),           // 8: fs.CopyRangeMethod
}
var file_config_folderconfiguration_proto_depIdxs = []int32{
	2, // 0: config.FolderConfiguration.filesystem_type:type_name -> fs.FilesystemType
	3, // 1: config.FolderConfiguration.type:type_name -> config.FolderType
	0, // 2: config.FolderConfiguration.devices:type_name -> config.FolderDeviceConfiguration
	4, // 3: config.FolderConfiguration.min_disk_free:type_name -> config.Size
	5, // 4: config.FolderConfiguration.versioning:type_name -> config.VersioningConfiguration
	6, // 5: config.FolderConfiguration.order:type_name -> config.PullOrder
	7, // 6: config.FolderConfiguration.block_pull_order:type_name -> config.BlockPullOrder
	8, // 7: config.FolderConfiguration.copy_range_method:type_name -> fs.CopyRangeMethod
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_config_folderconfiguration_proto_init() }
func file_config_folderconfiguration_proto_init() {
	if File_config_folderconfiguration_proto != nil {
		return
	}
	file_config_foldertype_proto_init()
	file_config_size_proto_init()
	file_config_pullorder_proto_init()
	file_config_versioningconfiguration_proto_init()
	file_config_blockpullorder_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_config_folderconfiguration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderDeviceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_folderconfiguration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_folderconfiguration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_folderconfiguration_proto_goTypes,
		DependencyIndexes: file_config_folderconfiguration_proto_depIdxs,
		MessageInfos:      file_config_folderconfiguration_proto_msgTypes,
	}.Build()
	File_config_folderconfiguration_proto = out.File
	file_config_folderconfiguration_proto_rawDesc = nil
	file_config_folderconfiguration_proto_goTypes = nil
	file_config_folderconfiguration_proto_depIdxs = nil
}
