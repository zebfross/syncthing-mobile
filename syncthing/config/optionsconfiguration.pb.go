// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: lib/config/optionsconfiguration.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OptionsConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListenAddresses                     []string `protobuf:"bytes,1,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listen_addresses,omitempty"`
	GlobalDiscoveryServers              []string `protobuf:"bytes,2,rep,name=global_discovery_servers,json=globalDiscoveryServers,proto3" json:"global_discovery_servers,omitempty"`
	GlobalDiscoveryEnabled              bool     `protobuf:"varint,3,opt,name=global_discovery_enabled,json=globalDiscoveryEnabled,proto3" json:"global_discovery_enabled,omitempty"`
	LocalDiscoveryEnabled               bool     `protobuf:"varint,4,opt,name=local_discovery_enabled,json=localDiscoveryEnabled,proto3" json:"local_discovery_enabled,omitempty"`
	LocalAnnouncePort                   int32    `protobuf:"varint,5,opt,name=local_announce_port,json=localAnnouncePort,proto3" json:"local_announce_port,omitempty"`
	LocalAnnounceMulticastAddress       string   `protobuf:"bytes,6,opt,name=local_announce_multicast_address,json=localAnnounceMulticastAddress,proto3" json:"local_announce_multicast_address,omitempty"`
	MaxSendKbps                         int32    `protobuf:"varint,7,opt,name=max_send_kbps,json=maxSendKbps,proto3" json:"max_send_kbps,omitempty"`
	MaxRecvKbps                         int32    `protobuf:"varint,8,opt,name=max_recv_kbps,json=maxRecvKbps,proto3" json:"max_recv_kbps,omitempty"`
	ReconnectionIntervalS               int32    `protobuf:"varint,9,opt,name=reconnection_interval_s,json=reconnectionIntervalS,proto3" json:"reconnection_interval_s,omitempty"`
	RelaysEnabled                       bool     `protobuf:"varint,10,opt,name=relays_enabled,json=relaysEnabled,proto3" json:"relays_enabled,omitempty"`
	RelaysReconnectIntervalM            int32    `protobuf:"varint,11,opt,name=relays_reconnect_interval_m,json=relaysReconnectIntervalM,proto3" json:"relays_reconnect_interval_m,omitempty"`
	StartBrowser                        bool     `protobuf:"varint,12,opt,name=start_browser,json=startBrowser,proto3" json:"start_browser,omitempty"`
	NatTraversalEnabled                 bool     `protobuf:"varint,14,opt,name=nat_traversal_enabled,json=natTraversalEnabled,proto3" json:"nat_traversal_enabled,omitempty"`
	NatTraversalLeaseM                  int32    `protobuf:"varint,15,opt,name=nat_traversal_lease_m,json=natTraversalLeaseM,proto3" json:"nat_traversal_lease_m,omitempty"`
	NatTraversalRenewalM                int32    `protobuf:"varint,16,opt,name=nat_traversal_renewal_m,json=natTraversalRenewalM,proto3" json:"nat_traversal_renewal_m,omitempty"`
	NatTraversalTimeoutS                int32    `protobuf:"varint,17,opt,name=nat_traversal_timeout_s,json=natTraversalTimeoutS,proto3" json:"nat_traversal_timeout_s,omitempty"`
	UsageReportingAccepted              int32    `protobuf:"varint,18,opt,name=usage_reporting_accepted,json=usageReportingAccepted,proto3" json:"usage_reporting_accepted,omitempty"`
	UsageReportingSeen                  int32    `protobuf:"varint,19,opt,name=usage_reporting_seen,json=usageReportingSeen,proto3" json:"usage_reporting_seen,omitempty"`
	UsageReportingUniqueId              string   `protobuf:"bytes,20,opt,name=usage_reporting_unique_id,json=usageReportingUniqueId,proto3" json:"usage_reporting_unique_id,omitempty"`
	UsageReportingUrl                   string   `protobuf:"bytes,21,opt,name=usage_reporting_url,json=usageReportingUrl,proto3" json:"usage_reporting_url,omitempty"`
	UsageReportingPostInsecurely        bool     `protobuf:"varint,22,opt,name=usage_reporting_post_insecurely,json=usageReportingPostInsecurely,proto3" json:"usage_reporting_post_insecurely,omitempty"`
	UsageReportingInitialDelayS         int32    `protobuf:"varint,23,opt,name=usage_reporting_initial_delay_s,json=usageReportingInitialDelayS,proto3" json:"usage_reporting_initial_delay_s,omitempty"`
	AutoUpgradeIntervalH                int32    `protobuf:"varint,25,opt,name=auto_upgrade_interval_h,json=autoUpgradeIntervalH,proto3" json:"auto_upgrade_interval_h,omitempty"`
	UpgradeToPreReleases                bool     `protobuf:"varint,26,opt,name=upgrade_to_pre_releases,json=upgradeToPreReleases,proto3" json:"upgrade_to_pre_releases,omitempty"`
	KeepTemporariesH                    int32    `protobuf:"varint,27,opt,name=keep_temporaries_h,json=keepTemporariesH,proto3" json:"keep_temporaries_h,omitempty"`
	CacheIgnoredFiles                   bool     `protobuf:"varint,28,opt,name=cache_ignored_files,json=cacheIgnoredFiles,proto3" json:"cache_ignored_files,omitempty"`
	ProgressUpdateIntervalS             int32    `protobuf:"varint,29,opt,name=progress_update_interval_s,json=progressUpdateIntervalS,proto3" json:"progress_update_interval_s,omitempty"`
	LimitBandwidthInLan                 bool     `protobuf:"varint,30,opt,name=limit_bandwidth_in_lan,json=limitBandwidthInLan,proto3" json:"limit_bandwidth_in_lan,omitempty"`
	MinHomeDiskFree                     *Size    `protobuf:"bytes,31,opt,name=min_home_disk_free,json=minHomeDiskFree,proto3" json:"min_home_disk_free,omitempty"`
	ReleasesUrl                         string   `protobuf:"bytes,32,opt,name=releases_url,json=releasesUrl,proto3" json:"releases_url,omitempty"`
	AlwaysLocalNets                     []string `protobuf:"bytes,33,rep,name=always_local_nets,json=alwaysLocalNets,proto3" json:"always_local_nets,omitempty"`
	OverwriteRemoteDeviceNamesOnConnect bool     `protobuf:"varint,34,opt,name=overwrite_remote_device_names_on_connect,json=overwriteRemoteDeviceNamesOnConnect,proto3" json:"overwrite_remote_device_names_on_connect,omitempty"`
	TempIndexMinBlocks                  int32    `protobuf:"varint,35,opt,name=temp_index_min_blocks,json=tempIndexMinBlocks,proto3" json:"temp_index_min_blocks,omitempty"`
	UnackedNotificationIds              []string `protobuf:"bytes,36,rep,name=unacked_notification_ids,json=unackedNotificationIds,proto3" json:"unacked_notification_ids,omitempty"`
	TrafficClass                        int32    `protobuf:"varint,37,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	DefaultFolderPath                   string   `protobuf:"bytes,38,opt,name=default_folder_path,json=defaultFolderPath,proto3" json:"default_folder_path,omitempty"`
	SetLowPriority                      bool     `protobuf:"varint,39,opt,name=set_low_priority,json=setLowPriority,proto3" json:"set_low_priority,omitempty"`
	MaxFolderConcurrency                int32    `protobuf:"varint,40,opt,name=max_folder_concurrency,json=maxFolderConcurrency,proto3" json:"max_folder_concurrency,omitempty"`
	CrashReportingUrl                   string   `protobuf:"bytes,41,opt,name=crash_reporting_url,json=crashReportingUrl,proto3" json:"crash_reporting_url,omitempty"`
	CrashReportingEnabled               bool     `protobuf:"varint,42,opt,name=crash_reporting_enabled,json=crashReportingEnabled,proto3" json:"crash_reporting_enabled,omitempty"`
	StunKeepaliveStartS                 int32    `protobuf:"varint,43,opt,name=stun_keepalive_start_s,json=stunKeepaliveStartS,proto3" json:"stun_keepalive_start_s,omitempty"`
	StunKeepaliveMinS                   int32    `protobuf:"varint,44,opt,name=stun_keepalive_min_s,json=stunKeepaliveMinS,proto3" json:"stun_keepalive_min_s,omitempty"`
	StunServers                         []string `protobuf:"bytes,45,rep,name=stun_servers,json=stunServers,proto3" json:"stun_servers,omitempty"`
	DatabaseTuning                      Tuning   `protobuf:"varint,46,opt,name=database_tuning,json=databaseTuning,proto3,enum=config.Tuning" json:"database_tuning,omitempty"`
	MaxConcurrentIncomingRequestKib     int32    `protobuf:"varint,47,opt,name=max_concurrent_incoming_request_kib,json=maxConcurrentIncomingRequestKib,proto3" json:"max_concurrent_incoming_request_kib,omitempty"`
	AnnounceLanAddresses                bool     `protobuf:"varint,48,opt,name=announce_lan_addresses,json=announceLanAddresses,proto3" json:"announce_lan_addresses,omitempty"`
	SendFullIndexOnUpgrade              bool     `protobuf:"varint,49,opt,name=send_full_index_on_upgrade,json=sendFullIndexOnUpgrade,proto3" json:"send_full_index_on_upgrade,omitempty"`
	FeatureFlags                        []string `protobuf:"bytes,50,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
	// The number of connections at which we stop trying to conne
	// devices, zero meaning no limit. Does not affect incoming c
	ConnectionLimitEnough int32 `protobuf:"varint,51,opt,name=connection_limit_enough,json=connectionLimitEnough,proto3" json:"connection_limit_enough,omitempty"`
	// The maximum number of connections which we will allow in t;
	// meaning no limit. Affects incoming connections and prevent;
	// attempting outgoing connections.
	ConnectionLimitMax int32 `protobuf:"varint,52,opt,name=connection_limit_max,json=connectionLimitMax,proto3" json:"connection_limit_max,omitempty"`
	// When set, this allows TLS 1.2 on sync connections, where w;
	// default to TLS 1.3+ only.
	InsecureAllowOldTlsVersions bool `protobuf:"varint,53,opt,name=insecure_allow_old_tls_versions,json=insecureAllowOldTlsVersions,proto3" json:"insecure_allow_old_tls_versions,omitempty"`
}

func (x *OptionsConfiguration) Reset() {
	*x = OptionsConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lib_config_optionsconfiguration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionsConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionsConfiguration) ProtoMessage() {}

func (x *OptionsConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_lib_config_optionsconfiguration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionsConfiguration.ProtoReflect.Descriptor instead.
func (*OptionsConfiguration) Descriptor() ([]byte, []int) {
	return file_lib_config_optionsconfiguration_proto_rawDescGZIP(), []int{0}
}

func (x *OptionsConfiguration) GetListenAddresses() []string {
	if x != nil {
		return x.ListenAddresses
	}
	return nil
}

func (x *OptionsConfiguration) GetGlobalDiscoveryServers() []string {
	if x != nil {
		return x.GlobalDiscoveryServers
	}
	return nil
}

func (x *OptionsConfiguration) GetGlobalDiscoveryEnabled() bool {
	if x != nil {
		return x.GlobalDiscoveryEnabled
	}
	return false
}

func (x *OptionsConfiguration) GetLocalDiscoveryEnabled() bool {
	if x != nil {
		return x.LocalDiscoveryEnabled
	}
	return false
}

func (x *OptionsConfiguration) GetLocalAnnouncePort() int32 {
	if x != nil {
		return x.LocalAnnouncePort
	}
	return 0
}

func (x *OptionsConfiguration) GetLocalAnnounceMulticastAddress() string {
	if x != nil {
		return x.LocalAnnounceMulticastAddress
	}
	return ""
}

func (x *OptionsConfiguration) GetMaxSendKbps() int32 {
	if x != nil {
		return x.MaxSendKbps
	}
	return 0
}

func (x *OptionsConfiguration) GetMaxRecvKbps() int32 {
	if x != nil {
		return x.MaxRecvKbps
	}
	return 0
}

func (x *OptionsConfiguration) GetReconnectionIntervalS() int32 {
	if x != nil {
		return x.ReconnectionIntervalS
	}
	return 0
}

func (x *OptionsConfiguration) GetRelaysEnabled() bool {
	if x != nil {
		return x.RelaysEnabled
	}
	return false
}

func (x *OptionsConfiguration) GetRelaysReconnectIntervalM() int32 {
	if x != nil {
		return x.RelaysReconnectIntervalM
	}
	return 0
}

func (x *OptionsConfiguration) GetStartBrowser() bool {
	if x != nil {
		return x.StartBrowser
	}
	return false
}

func (x *OptionsConfiguration) GetNatTraversalEnabled() bool {
	if x != nil {
		return x.NatTraversalEnabled
	}
	return false
}

func (x *OptionsConfiguration) GetNatTraversalLeaseM() int32 {
	if x != nil {
		return x.NatTraversalLeaseM
	}
	return 0
}

func (x *OptionsConfiguration) GetNatTraversalRenewalM() int32 {
	if x != nil {
		return x.NatTraversalRenewalM
	}
	return 0
}

func (x *OptionsConfiguration) GetNatTraversalTimeoutS() int32 {
	if x != nil {
		return x.NatTraversalTimeoutS
	}
	return 0
}

func (x *OptionsConfiguration) GetUsageReportingAccepted() int32 {
	if x != nil {
		return x.UsageReportingAccepted
	}
	return 0
}

func (x *OptionsConfiguration) GetUsageReportingSeen() int32 {
	if x != nil {
		return x.UsageReportingSeen
	}
	return 0
}

func (x *OptionsConfiguration) GetUsageReportingUniqueId() string {
	if x != nil {
		return x.UsageReportingUniqueId
	}
	return ""
}

func (x *OptionsConfiguration) GetUsageReportingUrl() string {
	if x != nil {
		return x.UsageReportingUrl
	}
	return ""
}

func (x *OptionsConfiguration) GetUsageReportingPostInsecurely() bool {
	if x != nil {
		return x.UsageReportingPostInsecurely
	}
	return false
}

func (x *OptionsConfiguration) GetUsageReportingInitialDelayS() int32 {
	if x != nil {
		return x.UsageReportingInitialDelayS
	}
	return 0
}

func (x *OptionsConfiguration) GetAutoUpgradeIntervalH() int32 {
	if x != nil {
		return x.AutoUpgradeIntervalH
	}
	return 0
}

func (x *OptionsConfiguration) GetUpgradeToPreReleases() bool {
	if x != nil {
		return x.UpgradeToPreReleases
	}
	return false
}

func (x *OptionsConfiguration) GetKeepTemporariesH() int32 {
	if x != nil {
		return x.KeepTemporariesH
	}
	return 0
}

func (x *OptionsConfiguration) GetCacheIgnoredFiles() bool {
	if x != nil {
		return x.CacheIgnoredFiles
	}
	return false
}

func (x *OptionsConfiguration) GetProgressUpdateIntervalS() int32 {
	if x != nil {
		return x.ProgressUpdateIntervalS
	}
	return 0
}

func (x *OptionsConfiguration) GetLimitBandwidthInLan() bool {
	if x != nil {
		return x.LimitBandwidthInLan
	}
	return false
}

func (x *OptionsConfiguration) GetMinHomeDiskFree() *Size {
	if x != nil {
		return x.MinHomeDiskFree
	}
	return nil
}

func (x *OptionsConfiguration) GetReleasesUrl() string {
	if x != nil {
		return x.ReleasesUrl
	}
	return ""
}

func (x *OptionsConfiguration) GetAlwaysLocalNets() []string {
	if x != nil {
		return x.AlwaysLocalNets
	}
	return nil
}

func (x *OptionsConfiguration) GetOverwriteRemoteDeviceNamesOnConnect() bool {
	if x != nil {
		return x.OverwriteRemoteDeviceNamesOnConnect
	}
	return false
}

func (x *OptionsConfiguration) GetTempIndexMinBlocks() int32 {
	if x != nil {
		return x.TempIndexMinBlocks
	}
	return 0
}

func (x *OptionsConfiguration) GetUnackedNotificationIds() []string {
	if x != nil {
		return x.UnackedNotificationIds
	}
	return nil
}

func (x *OptionsConfiguration) GetTrafficClass() int32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *OptionsConfiguration) GetDefaultFolderPath() string {
	if x != nil {
		return x.DefaultFolderPath
	}
	return ""
}

func (x *OptionsConfiguration) GetSetLowPriority() bool {
	if x != nil {
		return x.SetLowPriority
	}
	return false
}

func (x *OptionsConfiguration) GetMaxFolderConcurrency() int32 {
	if x != nil {
		return x.MaxFolderConcurrency
	}
	return 0
}

func (x *OptionsConfiguration) GetCrashReportingUrl() string {
	if x != nil {
		return x.CrashReportingUrl
	}
	return ""
}

func (x *OptionsConfiguration) GetCrashReportingEnabled() bool {
	if x != nil {
		return x.CrashReportingEnabled
	}
	return false
}

func (x *OptionsConfiguration) GetStunKeepaliveStartS() int32 {
	if x != nil {
		return x.StunKeepaliveStartS
	}
	return 0
}

func (x *OptionsConfiguration) GetStunKeepaliveMinS() int32 {
	if x != nil {
		return x.StunKeepaliveMinS
	}
	return 0
}

func (x *OptionsConfiguration) GetStunServers() []string {
	if x != nil {
		return x.StunServers
	}
	return nil
}

func (x *OptionsConfiguration) GetDatabaseTuning() Tuning {
	if x != nil {
		return x.DatabaseTuning
	}
	return Tuning_TUNING_AUTO
}

func (x *OptionsConfiguration) GetMaxConcurrentIncomingRequestKib() int32 {
	if x != nil {
		return x.MaxConcurrentIncomingRequestKib
	}
	return 0
}

func (x *OptionsConfiguration) GetAnnounceLanAddresses() bool {
	if x != nil {
		return x.AnnounceLanAddresses
	}
	return false
}

func (x *OptionsConfiguration) GetSendFullIndexOnUpgrade() bool {
	if x != nil {
		return x.SendFullIndexOnUpgrade
	}
	return false
}

func (x *OptionsConfiguration) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *OptionsConfiguration) GetConnectionLimitEnough() int32 {
	if x != nil {
		return x.ConnectionLimitEnough
	}
	return 0
}

func (x *OptionsConfiguration) GetConnectionLimitMax() int32 {
	if x != nil {
		return x.ConnectionLimitMax
	}
	return 0
}

func (x *OptionsConfiguration) GetInsecureAllowOldTlsVersions() bool {
	if x != nil {
		return x.InsecureAllowOldTlsVersions
	}
	return false
}

var File_lib_config_optionsconfiguration_proto protoreflect.FileDescriptor

var file_lib_config_optionsconfiguration_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x17, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6c, 0x69, 0x62, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xaa, 0x15, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x47, 0x0a, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x6e, 0x64, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x76, 0x4b, 0x62, 0x70, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6e, 0x61, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x61, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6d,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x61, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x5f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x61, 0x74,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x4d, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x45, 0x0a, 0x1f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x6c, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x12, 0x35, 0x0a, 0x17,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61,
	0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x50,
	0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x68,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4c, 0x61, 0x6e, 0x12, 0x39, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x46, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x74, 0x75, 0x6e, 0x4b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74,
	0x75, 0x6e, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x74, 0x75, 0x6e, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x62, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x62, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4c,
	0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6c, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x6c,
	0x64, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x12, 0x5a, 0x10,
	0x73, 0x79, 0x6e, 0x63, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lib_config_optionsconfiguration_proto_rawDescOnce sync.Once
	file_lib_config_optionsconfiguration_proto_rawDescData = file_lib_config_optionsconfiguration_proto_rawDesc
)

func file_lib_config_optionsconfiguration_proto_rawDescGZIP() []byte {
	file_lib_config_optionsconfiguration_proto_rawDescOnce.Do(func() {
		file_lib_config_optionsconfiguration_proto_rawDescData = protoimpl.X.CompressGZIP(file_lib_config_optionsconfiguration_proto_rawDescData)
	})
	return file_lib_config_optionsconfiguration_proto_rawDescData
}

var file_lib_config_optionsconfiguration_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_lib_config_optionsconfiguration_proto_goTypes = []interface{}{
	(*OptionsConfiguration)(nil), // 0: config.OptionsConfiguration
	(*Size)(nil),                 // 1: config.Size
	(Tuning)(0),                  // 2: config.Tuning
}
var file_lib_config_optionsconfiguration_proto_depIdxs = []int32{
	1, // 0: config.OptionsConfiguration.min_home_disk_free:type_name -> config.Size
	2, // 1: config.OptionsConfiguration.database_tuning:type_name -> config.Tuning
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_lib_config_optionsconfiguration_proto_init() }
func file_lib_config_optionsconfiguration_proto_init() {
	if File_lib_config_optionsconfiguration_proto != nil {
		return
	}
	file_lib_config_tuning_proto_init()
	file_lib_config_size_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lib_config_optionsconfiguration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionsConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lib_config_optionsconfiguration_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lib_config_optionsconfiguration_proto_goTypes,
		DependencyIndexes: file_lib_config_optionsconfiguration_proto_depIdxs,
		MessageInfos:      file_lib_config_optionsconfiguration_proto_msgTypes,
	}.Build()
	File_lib_config_optionsconfiguration_proto = out.File
	file_lib_config_optionsconfiguration_proto_rawDesc = nil
	file_lib_config_optionsconfiguration_proto_goTypes = nil
	file_lib_config_optionsconfiguration_proto_depIdxs = nil
}
